// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  userName     String  @unique @map("user_name")
  refreshToken String?
  password     String
  task         Task[]

  @@map("user")
}

model Task {
  id          String   @id @default(uuid())
  title       String?
  description String?
  status      Status   @default(ACTIVE)
  createdAt   DateTime @default(now()) @map("created_at") @db.Date
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Date
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")

  @@map("task")
}

enum Status {
  ACTIVE
  DONE
  PENDING
}

//ECOMMERCE
model UserEcommerce {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String?
  address  String?
  orders   Order[]
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  imageUrl     String?
  // You can add more fields like category, inventory count, etc.
  ProductOrder ProductOrder[]
}

//CREATE MANY
model Order {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  totalPrice   Float
  user         UserEcommerce  @relation(fields: [userId], references: [id])
  userId       Int
  productOrder ProductOrder[]
}

model ProductOrder {
  id        Int      @id @default(autoincrement())
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?
}
